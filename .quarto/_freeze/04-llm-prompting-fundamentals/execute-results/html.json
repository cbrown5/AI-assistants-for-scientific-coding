{
  "hash": "3d43d1c6f8defe3b0af63457d9771b7d",
  "result": {
    "engine": "knitr",
    "markdown": "# LLM prompting fundamentals\n\n*Start of practical material*\n\nWe'll cover LLM prompting theory through practical examples. This section will give you a deep understanding of how chatbots work and teach you some advanced prompting skills. By understanding these technical foundations, you'll be better equipped to leverage LLMs effectively for your R programming and data analysis tasks, and to troubleshoot when you're not getting the results you expect.\n\n**Software requirements:** VScode with R or Rstudio, [ellmer package](https://ellmer.tidyverse.org/), API license.\n\n## Setup authorisation\n\nGet your API key, see @sec-apikeys and then @sec-ellmer for connecting that to Ellmer. \n\n## Understanding how LLMs work\n\nLarge Language Models (LLMs) operate by predicting the next token in a sequence, one token at a time. To understand how this works in practice, we'll use the `ellmer` package to demonstrate some fundamental concepts. \n\nBy using `ellmer` to access a LLM through the API we get as close to the raw LLM as we are able. Later on we will use 'coding assistants' (e.g. copilot) which put another layer of software between you and the LLM. \n\nFirst, let's set up our environment and create a connection to an LLM. \n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ellmer)\n\n# Initialize a chat with Claude\nchat <- chat_openrouter(\n  system_prompt = \"\",\n  model = \"anthropic/claude-3.5-haiku\",\n  api_args = list(max_tokens = 50)\n)\nchat$chat(\"Ecologists like to eat \")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\nNotice that the model doesn't do what we intend, which is complete the sentence. LLMs have a built in Let's use the 'system prompt' to provide it with strong directions. \n\n::: {.tip}\n**Tip:** The system prompt sets the overall context for a chat. It is meant to be a stronger directive than the user prompt. In most chat interfaces (e.g. copilot) you are interacting with the user prompt. The provider has provided the system prompt, [here's the system prompt for the chat interface version of anthropic (Claude)](https://www.reddit.com/r/ClaudeAI/comments/1ixapi4/here_is_claude_sonnet_37_full_system_prompt/)\n:::\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchat <- chat_openrouter(\n  system_prompt = \"Complete the sentences the user providers you. Continue from where the user left off. Provide one answer only. Don't provide any explanation, don't reiterate the text the user provides\",\n  model = \"anthropic/claude-3.5-haiku\",\n#   model = \"anthropic/claude-3.7-sonnet\",\n  api_args = list(max_tokens = 50)\n)\nchat$chat(\"Ecologists like to eat \")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n::: {.tip}\n**Tip:** It is generally more effective to tell the LLM **what to do** rather than **what not to do** (just like people!). \n:::\n\n### Temperature effects\n\nThe \"temperature\" parameter controls the randomness of token predictions. Lower temperatures (closer to 0) make the model more deterministic, while higher temperatures (closer to 2) make it more creative and unpredictable.\n\nLet's compare responses with different temperatures:\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create chats with different temperature settings\nchat_temp <- chat_openrouter(\n          system_prompt = \"Complete the sentences the user providers you. Continue from where the user left off. Provide one answer only. Don't provide any explanation, don't reiterate the text the user provides\",\n        model = \"anthropic/claude-3.5-haiku\",\n        api_args = list(max_tokens = 50, temperature = 0)\n    )\n\nchat_temp$chat(\"Marine ecologists like to eat \")\n\nchat_temp <- chat_openrouter(\n          system_prompt = \"Complete the sentences the user providers you. Continue from where the user left off. Provide one answer only. Don't provide any explanation, don't reiterate the text the user provides\",\n        model = \"anthropic/claude-3.5-haiku\",\n        api_args = list(max_tokens = 50, temperature = 2)\n    )\n\nchat_temp$chat(\"Marine ecologists like to eat \")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\nAt low temperatures, you'll notice the model consistently produces similar \"safe\" completions that focus on the most probable next tokens. As temperature increases, the responses become more varied and potentially more creative, but possibly less coherent.\n\n### Comparing model complexity\n\nDifferent models have different capabilities based on their size, training data, and architecture. \n\nFor example `anthropic/claude-3.5-haiku` has many fewer parameters than `anthropic/claude-3.7-sonnet`. This means that the latter model is more complex and can handle more nuanced tasks. However, haiku is significantly cheaper to run. Haiku is 80c per million input tokens vs $3 for Sonnet. Output tokens are $4 vs $15\n\nFor the kind of simple tasks we are doing here, both give similar results. We will compare models later in the workshop when we use github copilot. \n\n### Understanding context windows\n\nLLMs have a limited \"context window\" - the amount of text they can consider when generating a response. This affects their ability to maintain coherence over long conversations. For most LLMs this is about 100-200K tokens, which includes input and output. However, Google's models have up to 1 million tokens. \n\nWe'll come back to the context window when we explore more advanced tools with longer prompts. These simple prompts don't come close to using up the context window. \n\n## Improving your prompts\n\nTODO Insert some examples comparing with and without these approaches\n\n### Being specific\n\n### Giving context\n\nShowing data etc... \n\n### Giving examples \n\n## DIY stats bot \n\nLet's put together what we've learnt so far and built our own chatbot. I've provided you with a detailed system prompt that implements a chat bot that specialises in helping with statistics. First, we read the bot markdown file from github, then we can use it in our chat session. \n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_bot <- readr::read_file(url(\"https://raw.githubusercontent.com/cbrown5/R-llm-workshop/refs/heads/main/resources/DIY-stats-bot-system.md\"))\n\nchat_stats <- chat_openrouter(\n          system_prompt = stats_bot,\n        model = \"anthropic/claude-3.7-sonnet\",\n        api_args = list(max_tokens = 5000)\n    )\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n`ellmer` has a few different options for interacting with chat bots. We've seen the 'chat' option. We can also have a `live_console()` or `live_browser()` (requires installing `shinychat`) chat. Let's use one of those options. With `live_browser()` you'll also see the browser automatically formats any markdown in the chat. \n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlive_browser(chat_stats)\n# live_console(chat_stats)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\nHere are some suggested questions to start, but feel free to try your own. \n\"Who are you?\"\n\"Use stats mode to provide me with some suggestions for how I could make a predictive model of a variable y, where I have a large number of potential explanatory variables. \"\n\n\n::: {.tip}\n**Tip:** How many of you started using \"DIY-stats-bot-system.md\" without first reading it? Did you find the easter egg in my prompt? For security you should ALWAYS read prompts before you start running them through LLM chats. We'll see later that LLMs can be given 'tools' which allow them to run code on your computer. Its easy to see how a malicious prompt could mis-use these tools. We'll cover security later. \n:::\n\n### Improving the stats bot\n\nMake a local copy of the stats bot system prompt and try editing it. Try different commands within it and see how your chat bot responds (you'll have to open a new chat object each time). \n\nHere's some ideas. \n\n- Try making a chat bot that is a verhment Bayesian that abhors frequentist statistics.   \n- You could provide it with more mode-specific instructions. For instance, try to get the chatbot to suggest appropriate figures for verifying statistical models. \n- Try different temperatures. \n- Add your own easter egg. \n\n::: {.tip}\n**Tip:** Adjectives, CAPITALS, `*markdown*` formatting can all help create emphasis so that your model more closely follows your commands. I used 'abhors' and 'verhment' above on purpose. \n:::\n\n\n\n### Tools\n\nTools like Copilot Agent mode then go a step further and send the results of step 5 back to the LLM, which then interprets the results and the loop continues (sometimes with and sometimes without direct user approval). \n\nIf you want to go further with making your own tools, then I suggest you check out `ellmer` package. It supports tool creation in a structured way. For instance, I made a tool that allows an [LLM to download and save ocean data to your computer](https://ellmer.tidyverse.org/articles/tool-calling.html).  \n\n## Reflection on prompting fundamentals \n\nTo recap, the basic workflow an agent follows is: \n\n1. Set-up a system prompt with detailed instructions for how the LLM should format responses\n2. User asks a question that is sent to the LLM\n3. LLM responds and sends response back to user\n4. Software on user's computer attempts to parse and act on the response according to pre-determined rules\n5. User's computers enacts the commands in the response and provides results to user\n\nThe key things I hoped you learnt from this lesson are: \n\n- Basic LLM jargon, including tokens, temperature, API access and different LLM models. \n- Some different prompt strategies, including role prompting, emphasis, chain of thought and one-shot. \n- The fundamentals of tool use and agents. \n\nNow you understand the basics, let's get into Github Copilot. \n",
    "supporting": [
      "04-llm-prompting-fundamentals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}